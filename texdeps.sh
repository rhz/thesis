#!/bin/sh

###
#
# texdeps.sh -- Generates LaTeX dependency info for GNU/Make
#
# This script extracts file-dependencies from LaTeX source files
# (*.tex) and produces output in Makefile format suitable for
# GNU/Make.  Typically, the output generated by this script from some
# PDF file `foo.pdf' with LaTeX source `foo.tex' is stored in a
# dependency file `foo.P' that can then be automatically included in a
# top-level Makefile through a statement such as
#
#   include $(PDFS:%.pdf=$(DEPSDIR)/%.P)
#
# The Makefile should also contain some rule(s) to update `foo.P' (by
# re-running this this script) whenever `foo.pdf' is generated, e.g.
#
#   %.pdf: %.tex
#          ./texdeps.sh $@ $< > $*.P   # <--- update dependency file
#          pdflatex $* && pdflatex $*
#
#
# Author: Sandro Stucki <sandro.stucki@gmail.com>
#
#


### Functions ###

# Print usage and exit
#
# Synopsis: exit_usage <exit code>
#
exit_usage() {
    echo "Usage: $0 PDFFILE [TEXFILE]" >&2
    exit $1
}


# Extract all file names appearing in a given LaTeX command from a
# given source file.  The result is stored in the variable `files'.
#
# Synopsis: extract_filenames <texfile> <command>
#
extract_filenames() {
    local src cmd sedcmd1 sedcmd2

    # Source file name
    src="$1"
    
    # LaTeX command/macro
    cmd="$2"

    # Filter
    sedcmd1='s/\\'"${cmd}"'\[[^]]*\]{\([^}][^}]*\)}/\1/g'
    sedcmd2='s/\\'"${cmd}"'{\([^}][^}]*\)}/\1/g'
    files="$(grep -Eo '^[^%]*' "${src}" \
        | grep -Eo '\\'"${cmd}"'(\[[^]]*\])?{[^}]+}' \
        | sed -e "${sedcmd1}; ${sedcmd2}")"
}

# Check a list of file basenames against a list of extensions and add
# those combinations corresponding to existing files to the `deps'
# variable.
#
# Synopsis: filter_filelist <dir> <filelist> <ext1> <ext2> ...
#
filter_filelist() {
    local d fs

    # Directory
    d="$1"
    shift

    # File list
    fs="$1"
    shift

    # Iterate through the directories/filenames/extensions and check
    # existence of files.
    for f in ${fs}; do
        for x in "$@"; do
            if [ -f "${d}${f}${x}" ]; then
                deps="${deps} ${d}${f}${x}"
                break;
            fi
        done
    done
}


### Start of main program ###

# Check if we got a PDF filename.
if [ -z "$1" ]; then
    exit_usage 1
fi
pdffile="$1"
pdfdir="$(dirname "${pdffile}")"
pdfbase="${pdfdir}/$(basename "${pdffile}" .pdf)"
shift 1

# Check if we got a .tex filename.
if [ -z "$1" ]; then
    texfile="${pdfbase}.tex"
else
    texfile="$1"
    shift 1
fi
texdir="$(dirname "${texfile}")"
texbase="${texdir}/$(basename "${texfile}" .tex)"

# Check if the .tex file is present, otherwise exit with an error.
if [ ! -f "${texfile}" ] ; then
    echo "File '${texfile}' not found!" >&2
    exit_usage 1
fi

# Extract file names from commands in .tex file.
extract_filenames "${texfile}" 'usepackage'       # Packages
pkgs="${files}"
extract_filenames "${texfile}" 'input'            # \input{} files
inputs="${files}"
extract_filenames "${texfile}" 'include'          # \include{} files
includes="${files}"
extract_filenames "${texfile}" 'includegraphics'  # Images
imgs="${files}"
extract_filenames "${texfile}" 'bibliography'     # Bibliography files
bibs="${files}"
extract_filenames "${texfile}" 'addbibresource'   # Bibliography files
bibls="${files}"

# Init the list of dependencies
deps=""

# Search for files in the current directory as well as the directory
# that contains the .tex file.  Discard all other files.
for dir in "" "${texdir}/"; do
    
    # Don't double check directories
    if [ "${dir}" = "./" ]; then break; fi 
    
    # Filter the lists and build `deps'
    filter_filelist "${dir}" "${pkgs}" "" ".sty"
    filter_filelist "${dir}" "${inputs} ${includes}" "" ".tex"
    filter_filelist "${dir}" "${imgs}" "" ".pdf" ".eps" ".jpg" \
        ".jpeg" ".png"
    filter_filelist "${dir}" "${bibs}" "" ".bib"
    filter_filelist "${dir}" "${bibls}" "" ".bib"
done

# Output the dependency list in Makefile-format
if [ ! -z "${deps}" ]; then
    echo "${pdffile}:${deps}"
    for f in ${deps}; do
        echo "${f}:"
    done
fi
